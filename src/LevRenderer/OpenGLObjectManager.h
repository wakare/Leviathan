#pragma once

#include <gl/glew.h>
#include <map>
#include "LSPtr.h"
#include "LevTextureObject.h"
#include "OpenGLRenderBackend.h"

namespace Leviathan
{
	namespace Renderer
	{
		class IOpenGLTextureObject;
		class OpenGLResourceManager;

		class OpenGLObjectManager
		{
		public:
			OpenGLObjectManager(OpenGLResourceManager& resource_manager);

			/*
			 ***************************************** Resource generation
			 * Every object resource should be generated by Object Manager.
			 */
			bool CreateTextureResource(Scene::LevTextureType tex_type, GLuint texture_object_uid, GLuint width, GLuint height, GLuint depth, const GLvoid* data, LSPtr<IOpenGLTextureObject>& out);

			bool GetTextureResource(GLuint texture_object_uid, LSPtr<IOpenGLTextureObject>& out);

			OpenGLResourceManager& GetResourceManager();

		private:
			OpenGLResourceManager& m_resource_manager;

			std::map<GLuint, LSPtr<IOpenGLTextureObject>> m_texture_objects;
		};
	}
}
